[1교시]
-정규표현식 ###
-grep
-ed
-sed ### (5장)

#1. 정규표현식
- 와일드카드와 혼동하지 말 것
  * ? ... chapter.txt(2장)
- 패턴 매칭 시 사용함.

 ##1. 마침표(.)
    - any single character
    - r. # ro, rk, rc, ....
    - .x. # xxx, oxo, ....
    - [a-zA-Z]


 ##2. ^ (caret)
  - 라인의 처음
  - [^] # not를 의미
  - [^a-z] # 소문자가 아님을 의미

 ##3. $ (dollar)
 - 라인의 끝
 - '^ $' #번 줄을 의미

 ##4. [리스트]
 - [a-z]
 - [a-np-z] # o를 제외한 모든 소문자
 - [a-n][p-z] -- [a-np-z]와 의미가 다름 
 - grep '[Tt]he' animals.txt
 - grep -i 'the' animals.txt

 ##5. *
  - zero or more
  - x* # x......
  - 앞글자 한정
  - x로 시작하는 단어
    - x* (x)
      xx* (o)

 ##6. \*
 - 1개 이상
   x\* # x가 1개 이상

 ##7. \?
 - zero or one

 ##8. \{i,j\}
 - j :
 - i,
 - ,j
 - x\{10\} # 10번
 - x\{1,10\}
 - x\{10,\}

 ##9. \(regex\)
 - back referencing이 가능
 - '^\(.\)\(.\)\2\1' * 동일한 알파벳 2개로 시작하는 라인
   *aa... ll...
 - abba
   '\(a\)\(b\)\2\1'

 ##10. regex1 \| regex2
  - regex1 or regex2

  

(문제)
1). a-f까지 매칭
  grep [a-f]
2). b나 ab 매칭
  grep b \| ab
3). 2번 + aaaaaab 매칭
   grep b \| ab \| aaaaaab
4). 모든 글자 매칭
5). #으로 시작하는 문장 매칭
6). \로 끝나는 문장 매칭
7). 대문자로 시작하지 않는 문장 매칭
8). 반줄이 아닌 모든 줄 매칭
9). cookie나 cake이 포함된 줄 매칭
10). w. 매칭

[2교시]
##1. 확장
[a-zA-Z0-9_] \w
\W (not)
\b : word boundary (앞뒤) h, o
\b<regex>\b
   \< 앞 \> 뒤
\B ell
\s whitespace (space ,tab)
\S

#2. ed
- 텍스트 에디터
- Full name: line-oriented text editor
- 인터렉티브형
- format: ed file

- 치환(a -> b)하기
[address][명령][정규식]
1,$s/a/b/
1,$p -- 프린트

1,$s/[a-z]//g # global (flag)

 (문제). 모음 지우기
  => 정규표현식의 연습 가능
  답: 1,$s/[AEIOUaeiou]//g
      1,$p (대문자까지)

      1,$s/[aeiou]//g
      1,$sp (대문자 제외)

  *화면 빠져나오기: ctrl+d

#3. sed
- stream editor
-표준 입출력 사용 가능, 파이프라인 사용 가능
- 인터렉티브 (x)
- 단위: 라인


(문제). python -> PYTHON 변경 후 파일 전체 동일한 이름으로 저장하기 (*아는 프로그램을 활용할 것)
   '''sh
   tr python PYTHON > animals.txt
   tr 'python' 'PYTHON' < animals.txt > animals.txt (x)
    ; tmp ; mv tmp animals.txt

    sed -i 's/python/PYTHON/g' animals.txt

  ##2). sed 실행
     - format: sed <script> <input_file> # > <out_file>
     - 예시) hello -> world file
       - sed 's/hello/world/g' file
         sed 's/hello/world/g' < file
         cat file | sed 's/hello/world/g' # 파이프라인으로 받을 수 있다.

  ### -i option
    - 동일 파일에 저장함. (in-place)
    - 임시 파일을 따로 저장하고 싶을 때 -iE # fileE

  ### -n option
    - p와 같이 사용하여 출력 범위를 저장한다.
      sed -n '2p' file
    - 5~10줄 출력
      sed -n '5,10p' file # ,가 range

      (문제). python이 있는 라인만 출력하기
          sed -n '/python/p' file
      
        - : 으로 여러 정규식 연결 가능
          sed -n '1p ; $p' file
          sed -n '1p ; $p' fileA fileB fileC
          cat fileA fileB fileC | sed -n '1p; $p'

  ### -e -f
     -e: expression   -f: file
     sed -e '1p' ; '$p' -f file
     - 옵션이 없으면 1번째가 정규표현식, 2번째가 입력 파일

  sed <option> <script> <input_file> # full format

  ##3) script
  - format: <address><cmd><options>
    '2p'
     - address: 2
     - cmd : p
     - 5,10p
     - '3d' == '3번째 줄 지우기'를 의미

 (문제). input_file에서 python으로 시작하는 라인을 삭제하고, hello -> world로 변경한 뒤 out_file에 저장하라.
  sed '/^python/d ; s/hello/world/g' input_file > out_file
  sed -e '/^python/d' -e 's/hello/world/g' input_file > out_file

  문제
  1. 5번째 줄 삭제
  2. python, Python 포함 줄 삭제
  3). 처음 10개 줄 중 2번 실행
  4). 각 줄에서 첫 3글자 삭제

  s'/python//g'

  -p, d, s, q (quit)

 ### cmd 's'
 - format: s/regex/replacement/flag
 - g
 - p: 해당부분 프린트
 - i: 대소문자 구분하지 않음

 (문제). image.jpg,1, image.jpg.2, image.jpg.3
    >> image1.jpg, image2.jpg, image3.jpg
    (sed 문 활용)
    답: sed s/\(.jpg\..)/(./)\g

### address
- 범위 지정
  '2p'
  sed '160s/a/b/'
  sed '/apple/s///' # apple이 있는 부분에서 무언가를 하는
  
  sed '160,200s/a/b/' (범위)
  sed '160,2s/a/b' # 160만 수행하고 끝
  $
  1,$~2 # step==2

# 스크립트 작성
- 파일에 커맨드라인 입력
- 모드 변경.
 chmod ~x file
- 실행
  name
  ./name

- 주석은 #로 단다.
  - 라인 단위