[1교시]
4). grep
-matching
-대소문자 구분
-라인 전체를 출력함.
문제). The가 있는 txt파일을 전체 조회할 것 = $grep The *.txt
- -v = 조건 문자열이 없는 라인 출력하

문제). /usr/lib에 포함된 하위 디렉터리의 갯수?
$ ls -l /usr/lib | cut -c1 | grep d | wc -l

5). sort
-정렬, 오름차순(a b c~)
- -r (reversed)
- 숫자 졍렬 (-n)
 $ sort -n -r sample.txt
 $ sort -nr sample.txt

문제). animals.txt 3번째 필드가 숫자 => 오름차순 정렬해서 출력할 것
$ cut -f3 animals.txt | sort -n

문제). 최솟값, 최댓값 출력
최대 $ cut -f3 animals.txt | sort -nr | head -n1
최소 $ cut -f3 animals.txt | sort -n | head -n1

문제). etc/passwd 디렉터리에서 사용자 이름 정렬하여 추출하기
$ head /etc/passwd | cut -d: -f1 | sort

-:로 구분된 필드 중 1번째 == 사용자

-전체 출력 (#https://man7.org/linux/man-pages/man1/head.1.html)



문제). 사용자 중 root가 있는지 확인할 것(존재하는 라인만 출력)
  | grep root
  - Root, root, ROOT
  -root 'abcdroot'
  - _root_ => -w

$ head /etc/passwd | cut -d: -f1 | grep root

문제). ls, head

# letters 내용 조회

6) uniq
-중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만 

문제). 성적표 (grades 파일)에서 가장 빈번하지 않은 등급부터 출력할 것
* cut -f1 grades | sort -r | uniq
-$ uniq -c grades.txt | sort -nr | head -n1
-$ cut -f1 grades | sort | uniq -c | sort -n
-$ uniq grades | sort -r | cut -f1
-$ uniq -c grades | sort -nr
-$ sort -r grades | cut -f1 | uniq -c | head -n1
-$ uniq grades | cut -f1 | sort -r | uniq -c | sort


[2교시]
글자 역순 
sort grades | cut -f1 | uniq -c | sort
sort grades | cut -f1 | uniq -c |sort -n (2개 모두 같은 결과 도출)

sort와 uniq의 차이
(AAACCCCBBBAAA)
*sort -> uniq
  =>ABC
*uniq -> sort
ACBA => AABC

=> sort -n
        1 C\t

        2 A
        -> sort
        1C

        * -d
        -f
        -rev c1
        -c9
------------------------
1. 버전 관리
- 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 비전으로 다시 꺼내올 수 있는 시스템
- 협업 
2. 깃(git)
-데이터 저장 방식 : 스냅샷
-오프라인 가능
  -if 빈 -> 텍스트 입력
  -키(key) - 벨류(value)
    -키는 고유함 (해시)
    -벨류 (텍스트)

-깃 상태
  -수정: 파일이 변경된 상태
  -커밋: 저장
  -스테이지: 스냅샷을 찍어 커밋 준비가 된 상태

  -수정
  -스테이징 -> 커밋(스테이징은 필수 과정)

-깃 커밋 순서:
  상태 체크 -> (수정) -> 스테이징 -> 커밋
  ....

2-1). 버전 체크
git --version
   *git -v --version
   ls -l
   ls --list(x)

2-2). 사용자 정보 설정
- name
- email
- 옵션: --global: 전체 시스템에 영향을 줌.
   *프로젝트마다 다른 이름을 사용하고 싶을 경우 옵션을 제외함

-core.editor
 -vi 빠져나올 때: q + enter

-git help <프로그램명>

# 디렉터리(directory)
  - 우리가 말하는 '폴더'
  -(리눅스) 트리구조를 가짐
     animals/
      ㄴ name.txt
      ㄴ age.txt
      mammals/
        ㄴcow.txt

  -하위 디렉터리 (child) - animals > mammals
    name.txt -> 파일
  -상위 디렉터리 (parent) - mammals > animals
  0 형제 디렉터리 (sibling) - mammals, reptile

  - /로 구분함
    animals/mammals/cow.txt
    <디렉터리 / .... / 파일명>
  - /: 루트 디렉터리

  -절대경로: 루트에서부터 시작
  -상대경뢰 현재 기준
     (에. 나의 현재 위치가 mammals이다. 그러나 상위 디렉터리로 가고 싶음)
      (1). 절대경로: /..../mammals
      (2). 상대경로: 
        .. : 부모 디렉터리
        . : 현재
      -cd: change directory
       ex). cd ./mammals
           cd ../

   - pwd, cd
   - .. .
   - mkdir


   문제). new_dir로 이동해서 디렉터리 "dir2" 만들기
   답:cd new_dir
mkdir dir2
3). 깃 초기화
   git init: .git에 모든 변경사항(=스냅샷)이 저장됨
4).상태 체크
   git status

   깃이 모르는 파일일 경우
   untracked -> 'add' -> tracked

   add -> commit

  <파일 정보>
   -branch 정보: main
   - f37df1e - 키 정보
   - init commit - 메시지
   1 file changed, 7 insertions(+): 변경 사항

  -git status
  -git add <파일명>
  git commit -n <메시지>
